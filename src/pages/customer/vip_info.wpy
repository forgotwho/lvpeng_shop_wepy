<template>
  <Loading :init.sync="init"/>
  <view class="container" wx:if="{{init}}">
    <view class="column-center">
      <view class="avatar-box">
        <image class="icon-xxl logo-image mb20" src="{{shop.avatar}}"/>
        <text class="muted mt10">{{shop.name}}</text>
      </view>

      <view class="dash-line"/>
      <view class="column-center member-box">
        <!--<image class="avatar-image" src="{{user.avatarUrl}}"/>-->
        <image class="qrcode-image" src="{{member.codeUrl}}"/>
      </view>
    </view>
    <view class="column-center number-box">
      <view class="column-center mt20 mb20">
        <text class="number-text mb20">{{numberText}}</text>
        <text class="muted mt10 mb20" wx:if="{{card.description}}">{{card.description}}</text>
      </view>
      <view class="dash-line"/>
      <view wx:if="{{success}}">
        <text class="muted mt10">{{scanText}}</text>
      </view>
    </view>
  </view>
</template>
<script>
  import wepy from 'wepy';
  import { connect } from 'wepy-redux';
  import auth from '../../api/auth';
  import store from '../../store/utils';
  import base from '../../mixins/base';
  import member from '../../api/member';
  import Tips from '../../utils/Tips';
  import WxUtils from '../../utils/WxUtils';
  import Loading from '../../components/common/loading';
  let interval = null;

  @connect({
    member: store.get('member'),
    card: store.get('card'),
    user: store.get('user'),
    shop: store.get('shop')
  })
  export default class VipInfo extends wepy.page {
    data = {
      init: false,
      success: false,
      scanText: ''
    };

    async onLoad () {
      const result = await auth.user({block: true, redirect: true});
      if (!result) return;
      await store.init();
      // 要求会员授权
      // 没注册的会员引导注册
      if (this.member == null) {
        await Tips.alert('请先注册会员');
        this.$redirect('/pages/customer/registe_member');
        return;
      }
      // 增加定时器扫描
      interval = setInterval(async () => {
        await this.checkScan();
        Tips.loaded();
      }, 5000);
      this.loaded();
    };
    onHide () {
      clearInterval(interval)
    }
    onUnload() {
      // 清理定时器
      clearInterval(interval);
    }
    loadUserInfo() {
      try {
        const value = wepy.getStorageSync('user');
        if (value) {
          return value;
        }
      } catch (e) {
        console.log(e)
      }
    }
    isPresentUpdate(currentPresents) {
      const isRuleExists = this.card.memberPresentRules != null && this.card.memberPresentRules.length > 0;
      const isCurrentExists = currentPresents != null && currentPresents.length > 0;
      const beforePresents = this.member.memberPresentDetails;
      const isBeforeExists = beforePresents != null && beforePresents.length > 0;
      if (!isCurrentExists || !isBeforeExists || !isRuleExists) return false;
      const before = currentPresents[0];
      const current = this.member.memberPresentDetails[0];
      return current.totalCount != before.totalCount;
    }
    createParsentText(currentPresents) {
      const current = currentPresents[0];
      const before = this.member.memberPresentDetails[0];
      const diffCount = current.totalCount - before.totalCount;
      const diffPresent = current.presentCount - before.presentCount;
      const {unit} = this.card.memberPresentRules[0];
      let text = '';
      if (diffCount > 0) {
        text += `已累计${diffCount}${unit}`
      }
      if (diffPresent > 0) {
        text += `，赠送${diffPresent}张兑换券`;
      }
      return text;
    }
    async checkScan() {
      const {totalCost, bonus, memberPresentDetails} = await member._member();
      const isPresentUpdate = this.isPresentUpdate(memberPresentDetails);
      const isCostUpdate = totalCost != this.member.totalCost || bonus != this.member.bonus;
      console.info(`before: cost=${totalCost}, bonus=${bonus}, current: cost=${this.member.totalCost}, bonus=${this.member.bonus}`);
      if (!isPresentUpdate && !isCostUpdate) return;
      let text = '';
      if (isCostUpdate) {
        // 计算金额与积分差值
        const priceDiff = (totalCost - this.member.totalCost).toFixed(2);
        const bonusDiff = (bonus - this.member.bonus).toFixed(0);
        // 拼接消费文本
        text = `扫描成功：已新增消费${priceDiff}元`;
        // 拼接积分文本
        if (bonusDiff > 0) {
          text += `，获得${bonusDiff}积分`;
        }
      }
      // 拼接赠送文本
      if (isPresentUpdate) {
        text += '\n' + this.createParsentText(memberPresentDetails);
      }
      // 扫描成功
      this.scanText = text;
      this.success = true;
      await Tips.success('扫描成功！');
      // 刷新缓存
      await store.refresh('member');
      clearInterval(interval);
      this.loaded();
      setTimeout(async () => WxUtils.backOrRedirect('/pages/customer/index'), 2000);
    };
    computed = {
      numberText() {
        if (this.member == null || this.member.memberNumber == null) return;
        const number = this.member.memberNumber;
        let text = '';
        for (let i = 0; i < number.length; i++) {
          text += number[i];
          if ((i + 1) % 4 == 0) {
            text += ' ';
          }
        }
        return text;
      }
    };
    config = {
      navigationBarTitleText: '会员卡号'
    };
    components = {
      Loading: Loading
    };
    mixins = [base];
  }
</script>
<style lang="scss">
  @import "../../styles/variable";

  .container {
    justify-content: flex-start;
    width: 100%;
    height: 100%;
    background-color: white;
    .logo-image {
      border: $border;
      border-radius: 50%;
      margin-top: 40rpx;
    }
    .dash-line {
      width: 70%;
      color: #EDEDED;
      border-bottom: 1px dashed #EDEDED;
    }
    .member-box{
      margin-top: 30rpx;
      /*position: relative;*/
      /*top: 110px;*/
      .qrcode-image {
      /*position: absolute;*/
      width: 200px;
      height: 200px;
      }
      .avatar-image {
        /*position: absolute;*/
        z-index: 1;
        border-radius: 50%;
        width: 90px;
        height: 90px;
      }
    }
    .avatar-box{
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      height: 150px;
    }
    .number-box{
      /*position: relative;*/
      /*top: 210px;*/
    }
    .number-text{
      font-size: 40rpx;
    }
  }
</style>
